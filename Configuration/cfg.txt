START -> _BLANK.START  | "server".Server | EOF
Server -> _BLANK.Server | "{".ServerToken
ServerToken -> _BLANK.ServerToken | _END_BRACE.START | _ServerListToken._Token.ServerToken | "location"._Token.Location
Location -> _BLANK.Location | "{".LocationToken
LocationToken -> _BLANK.LocationToken | _END_BRACE.ServerToken | _LocationListToken._Token.LocationToken
_ServerListToken -> "listen"|"server_name"|"max_client_body_size"|"error_page"
_LocationListToken -> "allow_methods"|"redirect"|"auto_index"|"root"|"index"|"upload_pass"|"cgi_pass"
_Token -> [\t|\v|\r|\f]+.[^\n{}]*
_END_BRACE -> "}"
_BLANK -> \n|\t|\v|\r|\f

---
* parse ip:port
    ([1-9][0-9]*).{3}:[1-9][0-9]* 0<=n<=255, 0<=n<=65535
* parse hostname:port
* parse servername

for i in {1..100}; do curl -s -o /dev/null 127.0.0.1:3030 && echo "Success" || echo "Failed"; done

//TOD HOST, ../ in requested path
//TOD relative path and abs
//Tod indexFile
//TODO if redirection redirect automatically without check (ask for GET POST)
//TODO CGI header parse
//TODO header can allowed duplacate cookies
//Todo when client send you a keep-alive send him keep-alive
//TODO CGI headers
//Todo content length not begger then size_type
//Todo Internal Server Error
//TODO delete


//TODO Header Accept
//TODO htons
//max body size 