	std::string  getHeaderResponse(Client &client, std::string &path)
		{
			std::string headerRespone = "HTTP/1.1 " + std::to_string(client.responseCode);
			fseek(client.fp, 0L, SEEK_END);
			size_t fileSize = ftell(client.fp);
			rewind(client.fp);
			
			const char *contentType = get_content_type(path.c_str());
			if (client.responseCode == 400)
				headerRespone += "  Bad Request ";
			else if (client.responseCode == 404)
				headerRespone += "  Not Found ";
			else
				headerRespone += " OK ";
			headerRespone += "\r\nConnection: close\r\nContent-Length: " + std::to_string(fileSize) +  "\r\nContent-Type: " + contentType + "\r\n\r\n";
	
			return (headerRespone);
		}
		void setPathError(Client &client, std::string &path)
		{
		
			path = getServerConfigs().getErrorPage(client.responseCode);
			client.fp = fopen(path.c_str(), "rb");
		}

		void sendHeaderResponse(Client &client, fd_set &reads, fd_set &writes, int &clientIdx)
		{
			Location &bestLocationMatched = getBestMatchedLocation(_serverConfigs.getLocations(), client.path);
			std::string path = getPathRessource(bestLocationMatched ,client.path);
			if (path.find("..") != std::string::npos)
			{
				client.responseCode = 400;				
			}
			else if (tryOpenRessource(bestLocationMatched, path, client) == false)
			{
				client.responseCode = 404;
			}
			
			if (client.responseCode != 200)
			{
				setPathError(client, path);
			}
			
			std::string responseHeader = getHeaderResponse(client, path);
			std::cout << "response = "  << responseHeader << std::endl;
			
			if (send(client.socket, responseHeader.c_str(), responseHeader.length(), 0)  == -1)
			{
				fclose(client.fp);
				client.fp = nullptr;
				_clients.dropClient(clientIdx, reads, writes);
			}
		}